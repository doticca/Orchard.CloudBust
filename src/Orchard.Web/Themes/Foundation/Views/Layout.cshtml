@{
    Func<dynamic, dynamic> Zone = x => Display(x);

    WorkContext.Layout.Header.Add(New.Branding(), "5");

    Model.Id = "off-canvas-wrapper";
    var tag = Tag(Model, "div");

    var errorMessage = ViewData.ModelState.Values.SelectMany(modelState => modelState.Errors).Aggregate(string.Empty, (current, error) => current + error.ErrorMessage);
    TempData["ErrorMessage"] = errorMessage;    
}
@tag.StartElement
<div class="off-canvas-wrapper-inner" data-off-canvas-wrapper>

    <div class="off-canvas position-left" id="offCanvas" data-off-canvas data-position="left">
        @if (Model.MobileNavigation != null)
        {
            @Zone(Model.MobileNavigation)
        }
    </div>

    <div class="off-canvas-content" data-off-canvas-content>
        @if (Model.Header != null)
        {
            <header id="layout-header" class="group">
                <div id="header">
                    @Zone(Model.Header)
                </div>
            </header>
        }

        @if (Model.Navigation != null)
        {
            @Zone(Model.Navigation)
        }

        @if (Model.BeforeMain != null)
        {
            @Zone(Model.BeforeMain)
        }

        @if (Model.Featured != null)
        {
            @Zone(Model.Featured)
        }
        
        <section id="section-messages">
        @if (Model.Messages != null)
        {
            @Zone(Model.Messages)
        }
        </section>
        <section id="main">
            @if (Model.BeforeContent != null)
            {
                @Zone(Model.BeforeContent)
            }
            @if (Model.Content != null)
            {
                <div id="content">
                    @Zone(Model.Content)
                </div>
            }
            @if (Model.AfterContent != null)
            {
                @Zone(Model.AfterContent)
            }
        </section>

        @if (Model.AfterMain != null)
        {
            @Zone(Model.AfterMain)
        }

        <footer class="footer-nav row expanded collapse show-for-medium">
            <div class="footer-nav-left">
                @if (Model.FooterLeft != null)
                {
                    @Display(Model.FooterLeft)
                }
            </div>
            <div class="footer-nav-center">
                @if (Model.FooterCenter != null)
                {
                    @Display(Model.FooterCenter)
                }
            </div>
            <div class="footer-nav-right">
                @if (Model.FooterRight != null)
                {
                    @Display(Model.FooterRight)
                }
            </div>
        </footer>
        <footer class="footer-nav row align-center expanded collapse show-for-small-only">
            <div class="columns small-12">
                @if (Model.FooterLeft != null)
                {
                    @Display(Model.FooterLeft)
                }
            </div>
            <div class="columns small-12 footer-nav-center">
                @if (Model.FooterCenter != null)
                {
                    @Display(Model.FooterCenter)
                }
            </div>
            <div class="columns small-12">
                @if (Model.FooterRight != null)
                {
                    @Display(Model.FooterRight)
                }
            </div>
        </footer>



    </div>
</div>
@tag.EndElement
@using (Script.Foot())
{
    <script type="text/javascript">
        var prev = 0;
        var $window = $(window);
        var nav = $('.scrollhide-nav');
        var subnav = $('.sub-nav-links');
        var distance = 0;
        var distancenav = nav.offset().top;
        if (subnav.length > 0)
            distance = $('.sub-nav-links').offset().top;

        $window.on('scroll', function () {         
            var scrollTop = $window.scrollTop();

            if (distancenav > 0) {
                nav.toggleClass('hidden', scrollTop > prev || scrollTop > distancenav - nav.height());
                }
            else if (distance > 0) {
                nav.toggleClass('hidden', scrollTop > prev);
                }

            if (scrollTop < nav.height())
                nav.removeClass('hidden'); 

            if (scrollTop > 0) {
                nav.addClass('change');
            }
            else {
                nav.removeClass('change');
            }

            if (scrollTop >= distance) {
                $('.sub-nav-links').addClass('fixed');
            }
            else {
                $('.sub-nav-links').removeClass('fixed');
            }

            if (nav.hasClass('hidden')) {
                $('.sub-nav-links').removeClass('pushed');
            } else {
                $('.sub-nav-links').addClass('pushed');
            }

            prev = scrollTop;
        });
    </script>
    <script>
        $(document).ready(function(){
            $("a").on('click', function(event) {

                if (this.hash !== "") {
                    event.preventDefault();

                    var hash = this.hash;
                    $('html, body').animate({
                        scrollTop: $(hash).offset().top
                    }, 800, function(){
                        window.location.hash = hash;
                    });
                }
            });
        });
    </script>
    <script type="text/javascript">
        var antiForgeryToken = '@Html.AntiForgeryTokenValueOrchard()';
        $( "input[name='__RequestVerificationToken']" ).val(antiForgeryToken);
    </script>
    <script>
        window.fcWidget.init({
            token: "e44661f2-b305-4b61-a62b-3dcfb7532385",
            host: "https://wchat.freshchat.com"
        });
    </script>
}
@using (Script.Foot())
{
    if (Model.JavaScript != null)
    {
        @Display(Model.JavaScript)
    }
}
